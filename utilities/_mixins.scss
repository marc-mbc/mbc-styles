// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
	&__#{$element} {
		@content;
	}
}
@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}

// Media queries

@mixin mq($break) {
	@if $break == "phone" {
		@media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
			@content;
		}
	}
	@else if $break == "tablet" {
		@media (min-width: $brkpoint-md + 1) {
			@content;
		}
	}
	@else if $break == "desktop" {
		@media (min-width: $brkpoint-lg) {
			@content;
		}
	}
	@else {
		@error "Whoops! No value could be retrieved for `#{$break}`. "
	}
}


//reset Neat's previous omega value in media queries
@mixin omega-reset($nth) {
	&:nth-child(#{$nth}) { 
		margin-right: flex-gutter($grid-columns, $gutter); 
	}
	&:nth-child(#{$nth}+1) { 
		clear: none 
	}
}


// Generate modifier color classes

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" { 
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	} 
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}
      
// Adjacent sibling margins

@mixin doubly($margin: 1em) {
	& + & {
		margin-left: $margin;
		@content;
	}
}


 