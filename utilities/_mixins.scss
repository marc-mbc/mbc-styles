// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
	&__#{$element} {
		@content;
	}
}
@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}

// Media queries

@mixin mq($break) {
	@if $break == "phone" {
		@media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
			@content;
		}
	}
	@else if $break == "tablet" {
		@media (min-width: $brkpoint-md + 1) {
			@content;
		}
	}
	@else if $break == "desktop" {
		@media (min-width: $brkpoint-lg) {
			@content;
		}
	}
	@else {
		@error "Whoops! No value could be retrieved for `#{$break}`. "
	}
}


//reset Neat's previous omega value in media queries
@mixin omega-reset($nth) {
	&:nth-child(#{$nth}) { 
		margin-right: flex-gutter($grid-columns, $gutter); 
	}
	&:nth-child(#{$nth}+1) { 
		clear: none 
	}
}


// Generate modifier color classes

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}



// Generates embossed button modifiers, theming and box shadow

@mixin btn-emb($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
			box-shadow: 0 6px darken($color, 15);
			&:hover {
				box-shadow: 0 4px darken($color, 15);
				top: 2px;
			} 
			&:active {
				box-shadow: 0 0 darken($color, 15);
				top: 6px;
			}
		}		
	}
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" { 
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	} 
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}
      
// Adjacent sibling margins

@mixin doubly($margin: 1em) {
	& + & {
		margin-left: $margin;
		@content;
	}
}

//generates patterns for backgrounds
//http://refills.bourbon.io/components/
@mixin texture($gradient-angle, $bg-color-1, $bg-color-2, $texture-number, $inverted) { $texture-list: 
	"paper.png"             
	// Fabric and paper
	"rice_paper.png"
	"noise_lines.png"
	"fabric_plaid.png"
	"first_aid_kit.png"
	"texturetastic_gray.png"
	"lil_fiber.png"
	"tex2res5.png"
	"skin_side_up.png"
	"light_noise_diagonal.png"
	"chruch.png"
	"45degreee_fabric.png"
	"bgnoise_lg.png"
	"little_pluses.png"
	"squairy_light.png"
	"white_texture.png"
	"binding_light.png"
	"double_lined.png"      
	// Grid, mesh and squares
	"grid.png"
	"absurdidad.png"
	"grid_noise.png"
	"fancy_deboss.png"
	"graphy.png"
	"noise_pattern_with_crosslines.png"
	"old_mathematics.png"
	"ps_neutral.png"
	"subtle_freckles.png"
	"wavegrid.png"
	"az_subtle.png"
	"tiny_grid.png"
	"wavegrid.png"
	"gridme.png"
	"noisy_grid.png"
	"subtlenet2.png"
	"white_carbon.png"
	"lghtmesh.png"
	"p5.png"                 
	// Dots
	"worn_dots.png"
	"subtle_dots.png"
	"brillant.png"
	"farmer.png"
	"retina_dust.png"        
	// Lines
	"pinstripe.png"
	"line_horizontal1.png"
	"line_horizontal2.png"
	"linen.png" 
	"vintage_speckles.png"   
	// Patina and irregular
	"subtle_grunge.png"
	"old_wall.png"
	"brushed.png"
	"stucco.png"
	"mooning.png"
	"husk.png"
	"concrete_wall_2.png"
	"noisy.png"
	"concrete_wall_3.png"
	"subtle_surface.png"
	"dust.png"
	"light_alu.png"
	"corrugation.png" 
	"kindajean.png"           
	// Diagonal
	"line_diagonal1.png"
	"line_diagonal2.png"
	"groovepaper.png"
	"brushed_alu.png"
	"rough_diagonal.png"
	"diagonal-noise.png"
	"cross_scratches.png"
	"striped_lens.png"
	"debut_light.png"
	"diagonal_waves.png"    
	// Special
	"honey_im_subtle.png"
	"pw_maze_white.png"
	"subtle_zebra_3d.png"
	"white_wave.png"
	"circles.png"
	"crosses.png"
	"grilled.png"
	"pw_pattern.png"
	"struckaxiom.png"
	"vichy.png"
	"wavecut.png"
	"whitey.png"
	"cream_pixels.png"
	"grey.png"
	"shinedotted.png"
	"stacked_circles.png"
	"noisy_grid_simple.png";

	@if ($inverted == 1) {
		@include background(url("https:
			//raw.githubusercontent.com/thoughtbot/refills/master/source/images/textures/#{nth($texture-list, $texture-number)}"), linear-gradient($gradient-angle, $bg-color-1, $bg-color-2), center no-repeat $bg-color-1 scroll);
	}

	@else {
		@include background(url("https:
			//raw.githubusercontent.com/thoughtbot/refills/master/source/images/textures/inverted/#{nth($texture-list, $texture-number)}"), linear-gradient($gradient-angle, $bg-color-1, $bg-color-2), center no-repeat $bg-color-1 scroll);
	}
}
 